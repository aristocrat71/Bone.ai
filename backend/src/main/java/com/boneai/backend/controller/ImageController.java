package com.boneai.backend.controller;

import com.boneai.backend.entity.Report;
import com.boneai.backend.entity.User;
import com.boneai.backend.entity.XrayImage;
import com.boneai.backend.repository.ReportRepository;
import com.boneai.backend.repository.UserRepository;
import com.boneai.backend.service.XrayImageService;
import com.boneai.backend.util.MultipartInputStreamFileResource;
import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/images")
@CrossOrigin(origins = "http://localhost:5173")
public class ImageController {
    @Autowired
    private XrayImageService xrayImageService;

    @Autowired
    private Cloudinary cloudinary;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ReportRepository reportRepository;

    @Autowired
    private RestTemplate restTemplate;


    @PostMapping("/upload")
    public ResponseEntity<?> uploadImage(
            @RequestParam("image") MultipartFile file,
            @RequestParam("userName") String userName) {

        try {
            // 1. Upload original to Cloudinary
            Map uploadResult = cloudinary.uploader().upload(file.getBytes(), ObjectUtils.emptyMap());
            String originalImageUrl = (String) uploadResult.get("secure_url");

            // 2. Find user
            System.out.println("Username received from frontend: " + userName);

            Optional<User> optionalUser = userRepository.findByName(userName);
            if (optionalUser.isEmpty()) {
                return ResponseEntity.badRequest().body("User not found");
            }
            User user = optionalUser.get();

            // 3. Save input image record
            XrayImage xrayImage = new XrayImage();
            xrayImage.setName(file.getOriginalFilename());
            xrayImage.setImageUrl(originalImageUrl);
            xrayImage.setUser(user);
            xrayImage = xrayImageService.saveImage(xrayImage);

            // 4. Send to FastAPI
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("file", new MultipartInputStreamFileResource(file.getInputStream(), file.getOriginalFilename()));

            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
            ResponseEntity<byte[]> response = restTemplate.exchange(
                    "http://localhost:8000/predict/", HttpMethod.POST, requestEntity, byte[].class);

            if (response.getStatusCode().is2xxSuccessful()) {
                byte[] processedImageBytes = response.getBody();

                // 5. Upload processed image to Cloudinary
                Map result = cloudinary.uploader().upload(processedImageBytes, ObjectUtils.emptyMap());
                String processedImageUrl = (String) result.get("secure_url");

                // 6. Save report
                Report report = new Report();
                report.setImageUrl(processedImageUrl);
                report.setReportText("Report generated by model");
                report.setUser(user);
                report.setImage(xrayImage);
                reportRepository.save(report);
                /*changes are done here */
                HttpHeaders headers2 = new HttpHeaders();
                headers2.setContentType(MediaType.IMAGE_JPEG);
                return new ResponseEntity<>(processedImageBytes, headers2, HttpStatus.OK);
                //return ResponseEntity.ok(Map.of("message", "Image and report saved", "url", originalImageUrl));
            } else {
                return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body("ML service failed");
            }

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Upload failed: " + e.getMessage());
        }
    }





    @GetMapping("/{id}")
    public Optional<XrayImage> getImage(@PathVariable Long id) {
        return xrayImageService.getImageById(id);
    }
}
